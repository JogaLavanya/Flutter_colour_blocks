import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import './colorsModel.dart';
import 'package:fluttertoast/fluttertoast.dart';
class ColorBlocks extends StatefulWidget {
  // final List<Autogenerated>? sampleList;
  const ColorBlocks({super.key});

  @override
  State<ColorBlocks> createState() => _ColorBlocksState();
}

//Method for fetching css colours response from api 
Future<ColorsModel> fetchColors() async {
  final response = await http
      .get(Uri.parse("https://www.csscolorsapi.com/api/colors"));
  if (response.statusCode == 200) {
    return ColorsModel.fromJson(jsonDecode(response.body) as Map<String, dynamic>);
  } else {
    throw Exception('Failed to load album');
  }
}
class _ColorBlocksState extends State<ColorBlocks> {
 late Future<ColorsModel> colorBlocks;
   @override
  void initState() {
    super.initState();
    colorBlocks = fetchColors();
  }

//Method for converting hex to rgb
  static int _getColorFromHex(String hexColor) {
    hexColor = hexColor.toUpperCase().replaceAll("#", "");
      if (hexColor.length == 6) {
       hexColor = "FF$hexColor";
       }
    return int.parse(hexColor, radix: 16);
   }

  @override
  Widget build(BuildContext context) {
   return MaterialApp(
      title: 'Fetch Data Example',
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Color blocks'),
        ),
        body: Center(
          child: FutureBuilder<ColorsModel>(
            future: colorBlocks,
            builder: (context, snapshot) {
              if (snapshot.hasData) {
                return 
                 Container(
                padding:const EdgeInsets.symmetric(horizontal: 0.0, vertical: 16.0),
             child: ListView.builder(
                scrollDirection: Axis.vertical,
                itemCount: snapshot.data!.colors!.length,
                itemBuilder: (context, index) {
                  var colorSlot = snapshot.data!.colors![index];
                   var bgColor = Color(
                          _getColorFromHex(
                            // 'FFFF0000'
                           colorSlot.hex.toString(),
                        )); // this color could be anything
                    var foregroundColor = bgColor.computeLuminance() > 0.5 ?
                                          Color(_getColorFromHex('000000')):
                                          Color(_getColorFromHex('FFFFFF'));
                  return Padding(
                    
                    padding: const EdgeInsets.all(4.0),
                    child: Container(
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(16),
                      ),
                      width: MediaQuery.of(context).size.width * 0.4,
                      child:  GestureDetector(
                        onTap: (){
                          Fluttertoast.showToast(
                                msg: "Colour code is ${colorSlot.hex}",
                                toastLength: Toast.LENGTH_SHORT,
                                gravity: ToastGravity.BOTTOM,
                                timeInSecForIosWeb: 1,
                                fontSize: 16.0
                            );
                        },
                       child: Card(
                        color: bgColor,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(16.0),
                        ),
                        elevation: 2,
                         child: Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 0),
                          child: Container(
                            decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(5),
                            ),
                             child:Padding(padding: const EdgeInsets.all(10),
                              child: Column(
                              mainAxisAlignment: MainAxisAlignment.start,
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(children:[  Text( style:TextStyle(color: foregroundColor,fontWeight: FontWeight.bold),"Name   :  "),
                                                Text(style:TextStyle(color: foregroundColor),'${colorSlot.name}')
                                            ]
                            ),
                             Row(children:[  Text( style:TextStyle(color: foregroundColor,fontWeight: FontWeight.bold),"Theme :  "),
                                               Text(style:TextStyle(color: foregroundColor),'${colorSlot.theme}')
                                            ]
                            ),
                             Row(children:[  Text( style:TextStyle(color: foregroundColor,fontWeight: FontWeight.bold),"Group  :  "),
                                                Text(style:TextStyle(color: foregroundColor),'${colorSlot.group}')
                                            ]
                            ),
                             ],)
                             )
                            
                            
                          )
                         )
                    ))
                  ));
                },
             )
                 );
               
              } else if (snapshot.hasError) {
                return Text('${snapshot.error}');
              }
              return const CircularProgressIndicator();
            },
          ),
        ),
      ),
    );
  }
}


